#! /bin/bash

## Get the application module name
while [[ -z "$appname" ]]; do
  read -p "1) Please enter the name of your application module (must be in CamelCase): " appname
  [[ -z "$appname" ]] && echo "You must enter an application module name"
done

while [[ -z "$appsource" ]]; do
  echo
  read -p "2) Please enter the application source (epigenesys / genesys): " source
  case $source in
    epigenesys)
      appsource="git.epigenesys.co.uk"
      ;;
    genesys)
      appsource="epi-stu-repos1-git.shef.ac.uk"
      ;;
    *)
      echo "You must enter a valid application source - either epigenesys or genesys"
      ;;
  esac
done

while [[ -z "$project" ]]; do
  echo
  echo "3) Please enter the name of your project"
  [[ "$source" == "genesys" ]] && echo "   For mini-projects, this should be your team name (e.g. team1); for assessed projects, it should be the demo site name (e.g. eltc-tea)"
  read -p "   Project name: " project
  [[ -z "$project" ]] && echo "You must enter the project name"
done

while [[ -z "$url" ]]; do
  echo
  echo "4) Please enter Git clone URL for the project (from the Gitlab project page)"
  case $source in 
    epigenesys)
      url_example="ris/ethics"
      ;;
    genesys)
      url_example="genesys-team1/mini-project"
      ;;
  esac
  echo "   For example: git@${appsource}:${url_example}.git"
  read -p "   Project URL: " url
  [[ -z "$url" ]] && echo "You must enter the url"
done

## Update the module application names
for file in `grep -lr --exclude install 'Rails4Sample' *`; do perl -pi -e s,Rails4Sample,${appname},g $file; done
perl -pi -e s,rails4_sample,${appname},g .ruby-gemset
perl -pi -e s,rails4_sample,${appname},g config/database_sample.yml
git remote set-url origin ${url}

## Update the application name for Capistrano
perl -pi -e s,"^set :application\, .*$","set :application\, '${project}'",g config/deploy.rb
perl -pi -e s,"^set :repository\, .*$","set :repository\, '${url}'",g config/deploy.rb
# perl -pi -e s,\"#\{application\}\",\"${project}\",g config/deploy/demo.rb
  
## Generate the new secret tokens
SECRET1=`(env LC_CTYPE=C tr -cd "a-zA-Z0-9-_\$\?" < /dev/urandom) | head -c 128`  
SECRET2=`(env LC_CTYPE=C tr -cd "a-zA-Z0-9-_\$\?" < /dev/urandom) | head -c 128`  
SECRET3=`(env LC_CTYPE=C tr -cd "a-zA-Z0-9-_\$\?" < /dev/urandom) | head -c 128`
SECRET="Rails.env.production? ? '${SECRET1}' : (Rails.env.demo? ? '${SECRET2}' : '${SECRET3}')" 
perl -pi -e "s,nil$,${SECRET},g" config/initializers/secret_token.rb

SECRET4=`(env LC_CTYPE=C tr -cd "a-zA-Z0-9-_\$\?" < /dev/urandom) | head -c 128`
perl -pi -e "s,config.secret_key = 'CHANGE ME'$,config.secret_key = '${SECRET4}',g" config/initializers/devise.rb


## Done!
echo ""
echo "The installation script has now completed."
echo "Please type \"cd .. && cd -\" at the Terminal to reload RVM."
